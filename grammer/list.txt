
n = [1, 2, 3, 4, 5]

リストは操作、つまり代入や要素抜き出しが可能！
  n[0] = 100
  n >> [1, 2, 3, 4, 5]


最後尾に代入
  n.append(100)　>> [1, 2, 3, 4, 5, 100]


インデックスを決めて代入
  n.insert(0, 200) >> [200, 1, 2, 3, 4, 5]


要素抜き出し
  p = n.pop() → 最後尾を抜き出し
  p >> 5
  n >> [1, 2, 3, 4]

  p = n.pop(0) → インデックスを指定して抜き出し
  p >> 1
  n >> [2, 3, 4, 5]


インデックス指定して要素消す
  del n[0] >> [2, 3, 4, 5]

  del n → リスト自体消える
  n >> Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
       NameError: name 'n' is not defined


値指定して要素消す
  n.remove(2) >> [1, 3, 4, 5]


文字列とリストの変換
  s = 'My name is Mike'

  to_split = s.split(' ') → 空白文字' 'で区切ってリストに格納
  to_split >> ['My', 'name', 'is', 'Mike']

  x = ' '.join(to_split) →　リストの間を空白文字' 'で埋めて結合
  x >> My name is Mike

  x = '##'.join(to_split)
  x >> My##name##is##Mike


値渡しと参照渡し
  i = [1, 2, 3, 4, 5]

  j = i
  j[0] = 100
  j >> [100, 2, 3, 4, 5]
  i >> [100, 2, 3, 4, 5] → i[0]は代入していないのに書き換わってしまう
  　　　　　　　　　　　　　　  pythonのリストの代入は参照渡し、つまりアドレスを指している
  　　　　　　　　　　　　　　  jとiは同じアドレスを指しているので書き換わる

  k = i.copy()
  k[0] = 100
  k >> [100, 2, 3, 4, 5]
  i >> [1, 2, 3, 4, 5] → このようにコピーすれば値渡しになり、
  　　　　　　　　　　　　　　元のリストは書き変わらない


リスト内包表記
  t1 = (1, 2, 3, 4, 5)
  t2 = (5, 6, 7, 8, 9)

　① for文とif文

   l = []
   for i in t1:
     if i % 2 == 0:
       l.append(i)
         ↓
   l = [i for i in t1 if i % 2==0] → [最初に代入する値、次に一行目のfor文、次に二行目のif文]


　② 二重for文

   l = []
   for i in t1:
     for j in t2:
       l.append(i * j)
         ↓
   l = [i * j for i in t1 for j in t2] → [最初に代入する値、次に一行目のfor文、次に二行目のfor文]







