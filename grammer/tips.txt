

if文の True / False
---------------------------------------------
a = True
b = False

if a:      → 変数が True を表すなら if 変数:
if not b:  → 変数が False を表すなら if not 変数:

             (False を表す変数)
              False / 整数の 0 / 少数の 0.0 / 空文字列の '' /
              空リストの [] / 空タプルの ()
----------------------------------------------



Nonetypeオブジェクトは is を用いる
----------------------------------------------
is_empty = None

if is_empty is None: → Nonetypeオブジェクトは is を用いる
----------------------------------------------



break と continue
  break はループをそこで抜ける
  continue はそれ以降の行をスキップして、ループを先頭から続ける


while else
  break で抜けていないとき  → else 発動
  break で抜けたとき       → else 発動しない



辞書をforで回す
----------------------------------------------
d = {'x' : 100, 'y' : 200}

for k, v in d.items():
  print(k, v)

            d.items() → [(key1, value1), (key2, value2),,] と辞書のキーと値をタプルのリストにして返す
　　　　　　　　　　　　　　　タプルはアンパッキングされて渡される
----------------------------------------------
 >> x 100
    y 200



デフォルト引数では空のリストや空の辞書を使わない
----------------------------------------------
def test(x, l=[]):  → 引数lはデフォルトで空リストと定義
  l.append(x)
  return l

print(test(100))    → 引数lはデフォルトで空リストなので x=100 が代入される
print(test(10))     → 上の値が残ってしまっている(参照渡しになるため)
----------------------------------------------
>> [100]
>> [100, 10]



空のリストを毎回使いたい場合
----------------------------------------------
def test(x, l=None): → 引数lをデフォルトで None型と定義
  if l is None:
    l = []
  l.append(x)
  return l

print(test(100))
print(test(10))
----------------------------------------------
>> [100]
>> [10]



複数の引数をまとめて扱う
----------------------------------------------
def say_something(word, *args):
    print(word)   → 最初の word に 'Hi' が入る
    print(args)   → 残りの引数は * でタプルとしてまとめられる

say_something('Hi', 'Mike', 'Nancy', 'Jecy')
----------------------------------------------
>> Hi
>> ('Mike', 'Nancy', 'Jecy')



複数の引数と複数のキーワード引数をまとめて扱う
----------------------------------------------
def menu(food, *args, **kargs):
    print(food)   → 最初の food に 'banana' が入る
    print(args)   → 複数の引数は * でタプルとしてまとめられる
    print(kargs)  → 複数のキーワード引数は ** で辞書としてまとめられる

menu('banana', 'apple', 'orange', main='beef', drink='coffee')
----------------------------------------------
>> banana
>> ('apple', 'orange')
>> {'main': 'beef', 'drink': 'coffee'}



辞書を関数に渡したい場合
----------------------------------------------
def menu(**kargs):
  print(kargs)      → 複数のキーワード引数は ** で辞書としてまとめられる


d = {
  'main': 'beef',
  'drink': 'coffee'
}
menu(**d)           → ** でまとめることで辞書がキーワード引数のような形で関数 menu に渡される
----------------------------------------------
>> {'main': 'beef', 'drink': 'coffee'}



内部関数そのものを返り値に返すクロージャー
----------------------------------------------
def outer(a, b):
  def inner():
    return a + b    → 内部関数には、外部関数に渡された値が入る

  return inner      → 内部関数そのものを返す


print(outer(1, 2))  → inner 関数そのものが返っているので関数オブジェクトが返ってくる
f = outer(1,2)
print(f())          → 返ってきた inner 関数が実行されて値が返ってくる　
----------------------------------------------
>> <0x10a98f8c8>
>> 3



クロージャーは渡す値を変えて使い分けたい時などに利用する
  例）円の面積を求めたい場合
----------------------------------------------
def circle_area_func(pi):
  def circle_area(radius):
    return pi * radius * radius

  return circle_area


cal1 = circle_area_func(3.14)
cal2 = circle_area_func(3.14159)　→ piの値を変えてみると

print(cal1(10))
print(cal2(10))                   → 円の面積も変わる
----------------------------------------------
>> 314.0
>> 314.1592



関数を引数に用いるものはラムダで一行で書く
  関数名: lambda 引数: 引数の処理

  例）曜日の先頭を大文字で揃えたい
----------------------------------------------
def change_words(words, func):
  new_l = []
  for word in words:
    new_l.append(func(word))
  print(new_l)

l = ['Mon', 'tue', 'Wed', 'Thu', 'fri', 'sat', 'San']
change_words(l, lambda word: word.capitalize()) → 関数が引数なので lambda 引数: 引数の処理
----------------------------------------------
>> ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'San']



ジェネレータ関数
  通常の関数の return文 を yield文 に置き換えたもの
  next()で呼び出すと最初の yield文 まで処理を実行して、次の next()で呼び出すと次の yield文 まで処理を実行
----------------------------------------------
def greeting():
  yield 'Good Morning'

  for i in range(10000):
    重たい処理
  yield 'Good Afternoon'

g = greeting()
print(next(g))     → next(ジェネレータ関数)で最初の yield まで処理を実行して出力
print('###')
print(next(g))     → next(ジェネレータ関数)で次の yield まで処理を実行して出力

----------------------------------------------
>> Good Morning
>> ###
>> 重たい処理をしてから
>> Good Afternoon



タプルの内包表記はジェネレーターになるから注意
----------------------------------------------
  g =  (i for i in range(10))
  print(next(g)) >> 0
  print(next(g)) >> 1
  print(next(g)) >> 2　　 → yieldごと出力　
----------------------------------------------



if __name__ == '__main__' が必要な理由： main.py を誰かにインポートされちゃった時に処理が発生するのを防ぐため
----------------------------------------------　　　　　　　　　　　　
def main():
  処理

if __name__ == '__main__':
  main()
----------------------------------------------



